import Link from "next/link";
export default function AboutPage() {
  return (
    <main className="container-about">
      <h1 className="title">Acerca de la Aplicaci√≥n</h1>
      <p className={"toolsDescription"}>
        Esta aplicaci√≥n de gesti√≥n de tareas permite a los usuarios organizar y
        administrar sus tareas diarias de manera eficiente y sencilla. Algunas
        de sus funcionalidades principales incluyen:
      </p>
      <ul className="features">
        <li>‚ûï Agregar nuevas tareas a la lista.</li>
        <li>‚úèÔ∏è Editar tareas existentes.</li>
        <li>‚ùå Eliminar tareas no deseadas.</li>
        <li>üîç Filtrar tareas completadas o pendientes.</li>
      </ul>

      <h2 className={"toolsTitle"}> üõ†Ô∏è Herramientas Utilizadas</h2>
      <p className={"toolsDescription"}>
        Este proyecto fue construido utilizando una serie de tecnolog√≠as
        modernas, que me han permitido crear una aplicaci√≥n robusta y eficiente.
        A continuaci√≥n, te explico algunas de ellas:
      </p>

      <h3 className={"tool"}>React</h3>
      <p className={"toolDescription"}>
        React es una biblioteca de JavaScript para la construcci√≥n de interfaces
        de usuario, que se destaca por su eficiencia en el manejo del estado a
        trav√©s de sus hooks. Utilic√© React para crear componentes reutilizables
        y manejar el estado de la aplicaci√≥n de manera eficiente, aprovechando
        hooks como useState y useEffect para la gesti√≥n de datos y efectos
        secundarios.
      </p>

      <div className="warning">
        <h2> ‚ö†Ô∏è</h2>
        <p className={"toolDescription"}>
          Utilic√© el componente Link de Next.js para manejar la navegaci√≥n entre
          las diferentes p√°ginas de la aplicaci√≥n. A diferencia de React, que
          normalmente requiere bibliotecas como react-router-dom para
          enrutamiento, Next.js proporciona su propio sistema de enrutamiento
          basado en el sistema de archivos. De esta manera, las rutas se generan
          autom√°ticamente a partir de los archivos dentro de la carpeta pages,
          lo que simplifica el manejo de la navegaci√≥n. Usar Link de Next.js
          asegura una transici√≥n eficiente y optimizada entre las p√°ginas sin
          necesidad de configuraciones adicionales.
        </p>
      </div>

      <h3 className={"tool"}>Next.js</h3>
      <p className={"toolDescription"}>
        Next.js es un framework basado en React que permite la creaci√≥n de
        aplicaciones web r√°pidas y optimizadas. Next.js ofrece funcionalidades
        como renderizado del lado del servidor, rutas autom√°ticas y un sistema
        de p√°ginas, lo cual facilita la organizaci√≥n del proyecto y mejora el
        rendimiento de la aplicaci√≥n.
      </p>

      <h3 className={"tool"}>Context API</h3>
      <p className={"toolDescription"}>
        La Context API de React se utiliza para gestionar el estado global de la
        aplicaci√≥n. En lugar de pasar datos a trav√©s de m√∫ltiples niveles de
        componentes, la Context API permite compartir el estado entre cualquier
        componente de la aplicaci√≥n sin necesidad de 'prop drilling'.
      </p>

      <h3 className={"tool"}>CSS</h3>
      <p className={"toolDescription"}>
        Para el dise√±o visual de la aplicaci√≥n, utilic√© CSS, asegur√°ndome de que
        la interfaz sea limpia, moderna y adaptable a diferentes dispositivos.
        Implement√© un dise√±o responsivo utilizando Flexbox y Grid, lo que
        garantiza que la aplicaci√≥n funcione bien en pantallas grandes y
        peque√±as.
      </p>

      <h3 className={"tool"}>Jest y Testing Library</h3>
      <p className={"toolDescription"}>
        Para persistir las tareas a trav√©s de sesiones, utilic√© localStorage
        para almacenar y recuperar las tareas de la lista. Al hacer uso del hook
        useEffect, me asegur√© de que las tareas se guarden en el almacenamiento
        local del navegador cada vez que se realice un cambio, y se carguen
        autom√°ticamente cuando la p√°gina se recargue. Esto garantiza que las
        tareas persistan incluso despu√©s de que el usuario cierre o recargue la
        aplicaci√≥n, mejorando la experiencia de usuario al mantener los datos
        intactos.
      </p>

      <h3 className={"tool"}>localStorage</h3>
      <p className={"toolDescription"}>
        Para garantizar el funcionamiento correcto de los componentes, utilic√©
        Jest junto con Testing Library. Jest permite ejecutar pruebas unitarias
        y mockear funciones, lo que facilita verificar el comportamiento de los
        componentes, como la interacci√≥n con el localStorage. Testing Library se
        encarg√≥ de las pruebas de la interfaz de usuario, permitiendo
        interactuar con los elementos como lo har√≠a un usuario real. Us√© queries
        como getByText y getByRole para verificar que las tareas se a√±aden y
        persisten correctamente en el localStorage, incluso despu√©s de recargar
        la p√°gina. Gracias a estas herramientas, pude asegurarme de que la
        aplicaci√≥n funcione correctamente y mantenga una buena experiencia de
        usuario.
      </p>

      <h3 className={"tool"}>Material Icons</h3>
      <p className={"toolDescription"}>
        En este proyecto, utilic√© Material Icons para incorporar iconos modernos
        y f√°cilmente reconocibles en la interfaz de usuario. Material Icons es
        una librer√≠a de iconos desarrollada por Google, que se integra
        f√°cilmente con React y otros frameworks. Proporciona una amplia variedad
        de iconos listos para usar, lo que mejora la experiencia visual de la
        aplicaci√≥n.
      </p>

      <Link href="/" className={"link"}>
        <h2>Volver al listado</h2>
      </Link>
    </main>
  );
}
